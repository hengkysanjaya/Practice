#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CRUDBindingSource_2
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="bioskop")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertdetailschedule(detailschedule instance);
    partial void Updatedetailschedule(detailschedule instance);
    partial void Deletedetailschedule(detailschedule instance);
    partial void Insertmstudio(mstudio instance);
    partial void Updatemstudio(mstudio instance);
    partial void Deletemstudio(mstudio instance);
    partial void Insertheaderschedule(headerschedule instance);
    partial void Updateheaderschedule(headerschedule instance);
    partial void Deleteheaderschedule(headerschedule instance);
    partial void Insertmapping(mapping instance);
    partial void Updatemapping(mapping instance);
    partial void Deletemapping(mapping instance);
    partial void Insertmsfilm(msfilm instance);
    partial void Updatemsfilm(msfilm instance);
    partial void Deletemsfilm(msfilm instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::CRUDBindingSource_2.Properties.Settings.Default.bioskopConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<detailschedule> detailschedules
		{
			get
			{
				return this.GetTable<detailschedule>();
			}
		}
		
		public System.Data.Linq.Table<mstudio> mstudios
		{
			get
			{
				return this.GetTable<mstudio>();
			}
		}
		
		public System.Data.Linq.Table<headerschedule> headerschedules
		{
			get
			{
				return this.GetTable<headerschedule>();
			}
		}
		
		public System.Data.Linq.Table<mapping> mappings
		{
			get
			{
				return this.GetTable<mapping>();
			}
		}
		
		public System.Data.Linq.Table<msfilm> msfilms
		{
			get
			{
				return this.GetTable<msfilm>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.detailschedule")]
	public partial class detailschedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _detailid;
		
		private System.Nullable<int> _scheduleid;
		
		private string _nokursi;
		
		private EntityRef<headerschedule> _headerschedule;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OndetailidChanging(int value);
    partial void OndetailidChanged();
    partial void OnscheduleidChanging(System.Nullable<int> value);
    partial void OnscheduleidChanged();
    partial void OnnokursiChanging(string value);
    partial void OnnokursiChanged();
    #endregion
		
		public detailschedule()
		{
			this._headerschedule = default(EntityRef<headerschedule>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_detailid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int detailid
		{
			get
			{
				return this._detailid;
			}
			set
			{
				if ((this._detailid != value))
				{
					this.OndetailidChanging(value);
					this.SendPropertyChanging();
					this._detailid = value;
					this.SendPropertyChanged("detailid");
					this.OndetailidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_scheduleid", DbType="Int")]
		public System.Nullable<int> scheduleid
		{
			get
			{
				return this._scheduleid;
			}
			set
			{
				if ((this._scheduleid != value))
				{
					if (this._headerschedule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnscheduleidChanging(value);
					this.SendPropertyChanging();
					this._scheduleid = value;
					this.SendPropertyChanged("scheduleid");
					this.OnscheduleidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nokursi", DbType="NVarChar(50)")]
		public string nokursi
		{
			get
			{
				return this._nokursi;
			}
			set
			{
				if ((this._nokursi != value))
				{
					this.OnnokursiChanging(value);
					this.SendPropertyChanging();
					this._nokursi = value;
					this.SendPropertyChanged("nokursi");
					this.OnnokursiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="headerschedule_detailschedule", Storage="_headerschedule", ThisKey="scheduleid", OtherKey="scheduleid", IsForeignKey=true, DeleteRule="CASCADE")]
		public headerschedule headerschedule
		{
			get
			{
				return this._headerschedule.Entity;
			}
			set
			{
				headerschedule previousValue = this._headerschedule.Entity;
				if (((previousValue != value) 
							|| (this._headerschedule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._headerschedule.Entity = null;
						previousValue.detailschedules.Remove(this);
					}
					this._headerschedule.Entity = value;
					if ((value != null))
					{
						value.detailschedules.Add(this);
						this._scheduleid = value.scheduleid;
					}
					else
					{
						this._scheduleid = default(Nullable<int>);
					}
					this.SendPropertyChanged("headerschedule");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.mstudio")]
	public partial class mstudio : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _studiono;
		
		private System.Nullable<int> _group;
		
		private System.Nullable<int> _row;
		
		private System.Nullable<int> _column;
		
		private EntitySet<mapping> _mappings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnstudionoChanging(int value);
    partial void OnstudionoChanged();
    partial void OngroupChanging(System.Nullable<int> value);
    partial void OngroupChanged();
    partial void OnrowChanging(System.Nullable<int> value);
    partial void OnrowChanged();
    partial void OncolumnChanging(System.Nullable<int> value);
    partial void OncolumnChanged();
    #endregion
		
		public mstudio()
		{
			this._mappings = new EntitySet<mapping>(new Action<mapping>(this.attach_mappings), new Action<mapping>(this.detach_mappings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_studiono", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int studiono
		{
			get
			{
				return this._studiono;
			}
			set
			{
				if ((this._studiono != value))
				{
					this.OnstudionoChanging(value);
					this.SendPropertyChanging();
					this._studiono = value;
					this.SendPropertyChanged("studiono");
					this.OnstudionoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[group]", Storage="_group", DbType="Int")]
		public System.Nullable<int> group
		{
			get
			{
				return this._group;
			}
			set
			{
				if ((this._group != value))
				{
					this.OngroupChanging(value);
					this.SendPropertyChanging();
					this._group = value;
					this.SendPropertyChanged("group");
					this.OngroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_row", DbType="Int")]
		public System.Nullable<int> row
		{
			get
			{
				return this._row;
			}
			set
			{
				if ((this._row != value))
				{
					this.OnrowChanging(value);
					this.SendPropertyChanging();
					this._row = value;
					this.SendPropertyChanged("row");
					this.OnrowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[column]", Storage="_column", DbType="Int")]
		public System.Nullable<int> column
		{
			get
			{
				return this._column;
			}
			set
			{
				if ((this._column != value))
				{
					this.OncolumnChanging(value);
					this.SendPropertyChanging();
					this._column = value;
					this.SendPropertyChanged("column");
					this.OncolumnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="mstudio_mapping", Storage="_mappings", ThisKey="studiono", OtherKey="studiono")]
		public EntitySet<mapping> mappings
		{
			get
			{
				return this._mappings;
			}
			set
			{
				this._mappings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_mappings(mapping entity)
		{
			this.SendPropertyChanging();
			entity.mstudio = this;
		}
		
		private void detach_mappings(mapping entity)
		{
			this.SendPropertyChanging();
			entity.mstudio = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.headerschedule")]
	public partial class headerschedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _scheduleid;
		
		private System.Nullable<int> _mappingid;
		
		private System.Nullable<System.DateTime> _time;
		
		private EntitySet<detailschedule> _detailschedules;
		
		private EntityRef<mapping> _mapping;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnscheduleidChanging(int value);
    partial void OnscheduleidChanged();
    partial void OnmappingidChanging(System.Nullable<int> value);
    partial void OnmappingidChanged();
    partial void OntimeChanging(System.Nullable<System.DateTime> value);
    partial void OntimeChanged();
    #endregion
		
		public headerschedule()
		{
			this._detailschedules = new EntitySet<detailschedule>(new Action<detailschedule>(this.attach_detailschedules), new Action<detailschedule>(this.detach_detailschedules));
			this._mapping = default(EntityRef<mapping>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_scheduleid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int scheduleid
		{
			get
			{
				return this._scheduleid;
			}
			set
			{
				if ((this._scheduleid != value))
				{
					this.OnscheduleidChanging(value);
					this.SendPropertyChanging();
					this._scheduleid = value;
					this.SendPropertyChanged("scheduleid");
					this.OnscheduleidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mappingid", DbType="Int")]
		public System.Nullable<int> mappingid
		{
			get
			{
				return this._mappingid;
			}
			set
			{
				if ((this._mappingid != value))
				{
					if (this._mapping.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmappingidChanging(value);
					this.SendPropertyChanging();
					this._mappingid = value;
					this.SendPropertyChanged("mappingid");
					this.OnmappingidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_time", DbType="DateTime")]
		public System.Nullable<System.DateTime> time
		{
			get
			{
				return this._time;
			}
			set
			{
				if ((this._time != value))
				{
					this.OntimeChanging(value);
					this.SendPropertyChanging();
					this._time = value;
					this.SendPropertyChanged("time");
					this.OntimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="headerschedule_detailschedule", Storage="_detailschedules", ThisKey="scheduleid", OtherKey="scheduleid")]
		public EntitySet<detailschedule> detailschedules
		{
			get
			{
				return this._detailschedules;
			}
			set
			{
				this._detailschedules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="mapping_headerschedule", Storage="_mapping", ThisKey="mappingid", OtherKey="mappingid", IsForeignKey=true)]
		public mapping mapping
		{
			get
			{
				return this._mapping.Entity;
			}
			set
			{
				mapping previousValue = this._mapping.Entity;
				if (((previousValue != value) 
							|| (this._mapping.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._mapping.Entity = null;
						previousValue.headerschedules.Remove(this);
					}
					this._mapping.Entity = value;
					if ((value != null))
					{
						value.headerschedules.Add(this);
						this._mappingid = value.mappingid;
					}
					else
					{
						this._mappingid = default(Nullable<int>);
					}
					this.SendPropertyChanged("mapping");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_detailschedules(detailschedule entity)
		{
			this.SendPropertyChanging();
			entity.headerschedule = this;
		}
		
		private void detach_detailschedules(detailschedule entity)
		{
			this.SendPropertyChanging();
			entity.headerschedule = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.mapping")]
	public partial class mapping : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _mappingid;
		
		private System.Nullable<int> _studiono;
		
		private System.Nullable<int> _filmid;
		
		private EntitySet<headerschedule> _headerschedules;
		
		private EntityRef<mstudio> _mstudio;
		
		private EntityRef<msfilm> _msfilm;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmappingidChanging(int value);
    partial void OnmappingidChanged();
    partial void OnstudionoChanging(System.Nullable<int> value);
    partial void OnstudionoChanged();
    partial void OnfilmidChanging(System.Nullable<int> value);
    partial void OnfilmidChanged();
    #endregion
		
		public mapping()
		{
			this._headerschedules = new EntitySet<headerschedule>(new Action<headerschedule>(this.attach_headerschedules), new Action<headerschedule>(this.detach_headerschedules));
			this._mstudio = default(EntityRef<mstudio>);
			this._msfilm = default(EntityRef<msfilm>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mappingid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int mappingid
		{
			get
			{
				return this._mappingid;
			}
			set
			{
				if ((this._mappingid != value))
				{
					this.OnmappingidChanging(value);
					this.SendPropertyChanging();
					this._mappingid = value;
					this.SendPropertyChanged("mappingid");
					this.OnmappingidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_studiono", DbType="Int")]
		public System.Nullable<int> studiono
		{
			get
			{
				return this._studiono;
			}
			set
			{
				if ((this._studiono != value))
				{
					if (this._mstudio.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstudionoChanging(value);
					this.SendPropertyChanging();
					this._studiono = value;
					this.SendPropertyChanged("studiono");
					this.OnstudionoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_filmid", DbType="Int")]
		public System.Nullable<int> filmid
		{
			get
			{
				return this._filmid;
			}
			set
			{
				if ((this._filmid != value))
				{
					if (this._msfilm.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnfilmidChanging(value);
					this.SendPropertyChanging();
					this._filmid = value;
					this.SendPropertyChanged("filmid");
					this.OnfilmidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="mapping_headerschedule", Storage="_headerschedules", ThisKey="mappingid", OtherKey="mappingid")]
		public EntitySet<headerschedule> headerschedules
		{
			get
			{
				return this._headerschedules;
			}
			set
			{
				this._headerschedules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="mstudio_mapping", Storage="_mstudio", ThisKey="studiono", OtherKey="studiono", IsForeignKey=true)]
		public mstudio mstudio
		{
			get
			{
				return this._mstudio.Entity;
			}
			set
			{
				mstudio previousValue = this._mstudio.Entity;
				if (((previousValue != value) 
							|| (this._mstudio.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._mstudio.Entity = null;
						previousValue.mappings.Remove(this);
					}
					this._mstudio.Entity = value;
					if ((value != null))
					{
						value.mappings.Add(this);
						this._studiono = value.studiono;
					}
					else
					{
						this._studiono = default(Nullable<int>);
					}
					this.SendPropertyChanged("mstudio");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="msfilm_mapping", Storage="_msfilm", ThisKey="filmid", OtherKey="filmid", IsForeignKey=true)]
		public msfilm msfilm
		{
			get
			{
				return this._msfilm.Entity;
			}
			set
			{
				msfilm previousValue = this._msfilm.Entity;
				if (((previousValue != value) 
							|| (this._msfilm.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._msfilm.Entity = null;
						previousValue.mappings.Remove(this);
					}
					this._msfilm.Entity = value;
					if ((value != null))
					{
						value.mappings.Add(this);
						this._filmid = value.filmid;
					}
					else
					{
						this._filmid = default(Nullable<int>);
					}
					this.SendPropertyChanged("msfilm");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_headerschedules(headerschedule entity)
		{
			this.SendPropertyChanging();
			entity.mapping = this;
		}
		
		private void detach_headerschedules(headerschedule entity)
		{
			this.SendPropertyChanging();
			entity.mapping = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.msfilm")]
	public partial class msfilm : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _filmid;
		
		private string _title;
		
		private System.Nullable<int> _duration;
		
		private EntitySet<mapping> _mappings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnfilmidChanging(int value);
    partial void OnfilmidChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OndurationChanging(System.Nullable<int> value);
    partial void OndurationChanged();
    #endregion
		
		public msfilm()
		{
			this._mappings = new EntitySet<mapping>(new Action<mapping>(this.attach_mappings), new Action<mapping>(this.detach_mappings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_filmid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int filmid
		{
			get
			{
				return this._filmid;
			}
			set
			{
				if ((this._filmid != value))
				{
					this.OnfilmidChanging(value);
					this.SendPropertyChanging();
					this._filmid = value;
					this.SendPropertyChanged("filmid");
					this.OnfilmidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(50)")]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_duration", DbType="Int")]
		public System.Nullable<int> duration
		{
			get
			{
				return this._duration;
			}
			set
			{
				if ((this._duration != value))
				{
					this.OndurationChanging(value);
					this.SendPropertyChanging();
					this._duration = value;
					this.SendPropertyChanged("duration");
					this.OndurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="msfilm_mapping", Storage="_mappings", ThisKey="filmid", OtherKey="filmid")]
		public EntitySet<mapping> mappings
		{
			get
			{
				return this._mappings;
			}
			set
			{
				this._mappings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_mappings(mapping entity)
		{
			this.SendPropertyChanging();
			entity.msfilm = this;
		}
		
		private void detach_mappings(mapping entity)
		{
			this.SendPropertyChanging();
			entity.msfilm = null;
		}
	}
}
#pragma warning restore 1591
